{"componentChunkName":"component---src-templates-blog-post-js","path":"/2006/2006-04-17-astar/","result":{"data":{"site":{"siteMetadata":{"title":"Fan's life"}},"mdx":{"id":"e8b77d86-f25f-5a44-9bd9-9ab05371ec92","excerpt":"经过了几天的测试，排除了几个小 Bug，现在的算法已经是很稳定了。性能大概是以前的三倍左右，最终的结果是只用上了设置状态的优化方法，其他方法都没用到。 之前会快 20 倍是因为新算法忘了做 clear，加上以后就是现在这个样子，大概是以前 3 倍的速度。以前的算法之所以慢主要是使用标准模板库里的 map…","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"终于明白了为什么新写的A*算法会快那么多\",\n  \"date\": \"2006-04-17T00:00:00.000Z\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"\\u7ECF\\u8FC7\\u4E86\\u51E0\\u5929\\u7684\\u6D4B\\u8BD5\\uFF0C\\u6392\\u9664\\u4E86\\u51E0\\u4E2A\\u5C0F Bug\\uFF0C\\u73B0\\u5728\\u7684\\u7B97\\u6CD5\\u5DF2\\u7ECF\\u662F\\u5F88\\u7A33\\u5B9A\\u4E86\\u3002\\u6027\\u80FD\\u5927\\u6982\\u662F\\u4EE5\\u524D\\u7684\\u4E09\\u500D\\u5DE6\\u53F3\\uFF0C\\u6700\\u7EC8\\u7684\\u7ED3\\u679C\\u662F\\u53EA\\u7528\\u4E0A\\u4E86\\u8BBE\\u7F6E\\u72B6\\u6001\\u7684\\u4F18\\u5316\\u65B9\\u6CD5\\uFF0C\\u5176\\u4ED6\\u65B9\\u6CD5\\u90FD\\u6CA1\\u7528\\u5230\\u3002\"), mdx(\"p\", null, \"\\u4E4B\\u524D\\u4F1A\\u5FEB 20 \\u500D\\u662F\\u56E0\\u4E3A\\u65B0\\u7B97\\u6CD5\\u5FD8\\u4E86\\u505A clear\\uFF0C\\u52A0\\u4E0A\\u4EE5\\u540E\\u5C31\\u662F\\u73B0\\u5728\\u8FD9\\u4E2A\\u6837\\u5B50\\uFF0C\\u5927\\u6982\\u662F\\u4EE5\\u524D 3 \\u500D\\u7684\\u901F\\u5EA6\\u3002\\u4EE5\\u524D\\u7684\\u7B97\\u6CD5\\u4E4B\\u6240\\u4EE5\\u6162\\u4E3B\\u8981\\u662F\\u4F7F\\u7528\\u6807\\u51C6\\u6A21\\u677F\\u5E93\\u91CC\\u7684 map \\u5BB9\\u5668\\uFF0C\\u8FD9\\u4E2A\\u5BB9\\u5668\\u5728 clear \\u65F6\\u7684\\u901F\\u5EA6\\u975E\\u5E38\\u6162\\uFF0C\\u4E0D\\u5F97\\u5DF2\\u8FD8\\u662F\\u6539\\u56DE vector\\uFF0Cclear \\u7684\\u901F\\u5EA6\\u5F88\\u5FEB\\u3002\"), mdx(\"p\", null, \"\\u7136\\u540E\\u7531\\u4E8E\\u8282\\u70B9\\u7ED3\\u6784\\u91CC\\u4F7F\\u7528\\u4E86\\u72B6\\u6001\\u6807\\u5FD7\\u76F4\\u63A5\\u8868\\u793A\\u662F\\u5426\\u5F00\\u653E\\u6216\\u8005\\u5173\\u95ED\\u6216\\u8005\\u672A\\u5904\\u7406\\uFF0C\\u5C31\\u53EF\\u4EE5\\u7701\\u53BB\\u4E00\\u4E2A\\u5173\\u95ED\\u8868\\uFF08\\u5F00\\u653E\\u8868\\u4E0D\\u80FD\\u7701\\uFF0C\\u56E0\\u4E3A\\u8981\\u4ECE\\u5F00\\u653E\\u8868\\u91CC\\u9009\\u51FA f \\u6700\\u5C0F\\u7684\\u8282\\u70B9\\uFF0C\\u76F4\\u63A5\\u4F7F\\u7528\\u6807\\u51C6\\u5E93\\u91CC\\u7684 min_element \\u7B97\\u6CD5\\u5C31\\u633A\\u5FEB\\u7684\\u4E86\\u3002\"), mdx(\"p\", null, \"\\u56E0\\u4E3A\\u662F vector\\uFF0C\\u5982\\u679C\\u6392\\u5E8F\\u7684\\u8BDD\\u6027\\u80FD\\u4E0B\\u964D\\u6BD4\\u8F83\\u591A\\uFF0C\\u4F46\\u662F\\u7528 list \\u5BB9\\u5668 clear \\u7684\\u901F\\u5EA6\\u66F4\\u6162\\uFF0C\\u76EE\\u524D\\u53EA\\u6709\\u4F7F\\u7528 vector\\uFF0C\\u9664\\u975E\\u4EE5\\u540E\\u81EA\\u5DF1\\u5199\\u4E00\\u4E2A\\u6392\\u5E8F\\u6027\\u80FD\\u597D\\uFF0Cclear \\u901F\\u5EA6\\u4E5F\\u5FEB\\u7684\\u5BB9\\u5668\\u66FF\\u4EE3\\uFF09\\uFF0C\\u7B97\\u662F\\u6BD4\\u8F83\\u6EE1\\u610F\\u4E86\\u3002\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"终于明白了为什么新写的A*算法会快那么多","date":"April 17, 2006","description":null}},"previous":{"fields":{"slug":"/2006/2006-04-11-cpp-template/"},"frontmatter":{"title":"模板有那么快么？？"}},"next":{"fields":{"slug":"/2006/2006-05-26-ace/"},"frontmatter":{"title":"计划用ACE写一个服务器"}}},"pageContext":{"id":"e8b77d86-f25f-5a44-9bd9-9ab05371ec92","previousPostId":"f6f35b03-9bcf-5e15-bd74-3803a92b01f2","nextPostId":"dd6ed659-ad5d-584b-a276-2409542013c9"}},"staticQueryHashes":["2841359383","916993862"]}