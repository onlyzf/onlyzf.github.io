{"componentChunkName":"component---src-templates-blog-post-js","path":"/2006/2006-04-06-singleton/","result":{"data":{"site":{"siteMetadata":{"title":"Fan's life"}},"markdownRemark":{"id":"4988a42f-fa6b-533e-bdf8-474ad09a4e55","excerpt":"《设计模式》上关于单件的定义和实现如下： 由于 Instance()使用惰性初始化，它的返回值直到第一次访问时才创建和保存。但是这种方式创建的对象没有被删除，也就是说不能执行析构函数，会造成内存泄漏。该用什么方法来解决呢？？ 是不是需要一个单件工厂来创建和管理所有的这些单件？但是这样又造成了不必要的复杂性。","html":"<p>《设计模式》上关于单件的定义和实现如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Singleton</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">static</span> Singleton<span class=\"token operator\">*</span> <span class=\"token function\">Instance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">Singleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">static</span> Singleton<span class=\"token operator\">*</span> _instance<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nSingleton<span class=\"token operator\">*</span> Singleton<span class=\"token operator\">::</span>_instance <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\nSingleton<span class=\"token operator\">*</span> <span class=\"token class-name\">Singleton</span><span class=\"token operator\">::</span><span class=\"token function\">Instance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_instance <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        _instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Singleton<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> _instance<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>由于 Instance()使用惰性初始化，它的返回值直到第一次访问时才创建和保存。但是这种方式创建的对象没有被删除，也就是说不能执行析构函数，会造成内存泄漏。该用什么方法来解决呢？？</p>\n<p>是不是需要一个单件工厂来创建和管理所有的这些单件？但是这样又造成了不必要的复杂性。</p>","frontmatter":{"title":"关于单件模式（Singleton）","date":"April 06, 2006","description":null}},"previous":{"fields":{"slug":"/2006/2006-04-06-buckets-effect/"},"frontmatter":{"title":"【转】谈论木桶理论新论"}},"next":{"fields":{"slug":"/2006/2006-04-11-astar/"},"frontmatter":{"title":"A*的优化"}}},"pageContext":{"id":"4988a42f-fa6b-533e-bdf8-474ad09a4e55","previousPostId":"e57eb334-c2c6-5654-be42-c3182c16883e","nextPostId":"2084ae4a-4cea-5910-a6cc-8d97c5197f23"}},"staticQueryHashes":["2841359383","916993862"]}