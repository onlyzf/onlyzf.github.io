{"componentChunkName":"component---src-templates-blog-post-js","path":"/2006/2006-04-11-cpp-template/","result":{"data":{"site":{"siteMetadata":{"title":"Fan's life"}},"mdx":{"id":"f6f35b03-9bcf-5e15-bd74-3803a92b01f2","excerpt":"前几天用 C++模板重写了一遍 A * 算法，实现的内容和非模板的算法一模一样，做了一下性能测试居然比非模板算法快 20 倍。太不可思议了，不能理解，看来看去两个算法都是一样的呀，难道真的是模板造成的？？据说模板的效率主要和编译器有关系，我用的编译器是 VC8，不知道其他编译器会不会有这么快？","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"模板有那么快么？？\",\n  \"date\": \"2006-04-11T00:00:00.000Z\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"\\u524D\\u51E0\\u5929\\u7528 C++\\u6A21\\u677F\\u91CD\\u5199\\u4E86\\u4E00\\u904D A\", \"*\", \"\\u7B97\\u6CD5\\uFF0C\\u5B9E\\u73B0\\u7684\\u5185\\u5BB9\\u548C\\u975E\\u6A21\\u677F\\u7684\\u7B97\\u6CD5\\u4E00\\u6A21\\u4E00\\u6837\\uFF0C\\u505A\\u4E86\\u4E00\\u4E0B\\u6027\\u80FD\\u6D4B\\u8BD5\\u5C45\\u7136\\u6BD4\\u975E\\u6A21\\u677F\\u7B97\\u6CD5\\u5FEB 20 \\u500D\\u3002\\u592A\\u4E0D\\u53EF\\u601D\\u8BAE\\u4E86\\uFF0C\\u4E0D\\u80FD\\u7406\\u89E3\\uFF0C\\u770B\\u6765\\u770B\\u53BB\\u4E24\\u4E2A\\u7B97\\u6CD5\\u90FD\\u662F\\u4E00\\u6837\\u7684\\u5440\\uFF0C\\u96BE\\u9053\\u771F\\u7684\\u662F\\u6A21\\u677F\\u9020\\u6210\\u7684\\uFF1F\\uFF1F\\u636E\\u8BF4\\u6A21\\u677F\\u7684\\u6548\\u7387\\u4E3B\\u8981\\u548C\\u7F16\\u8BD1\\u5668\\u6709\\u5173\\u7CFB\\uFF0C\\u6211\\u7528\\u7684\\u7F16\\u8BD1\\u5668\\u662F VC8\\uFF0C\\u4E0D\\u77E5\\u9053\\u5176\\u4ED6\\u7F16\\u8BD1\\u5668\\u4F1A\\u4E0D\\u4F1A\\u6709\\u8FD9\\u4E48\\u5FEB\\uFF1F\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"模板有那么快么？？","date":"April 11, 2006","description":null}},"previous":{"fields":{"slug":"/2006/2006-04-11-astar/"},"frontmatter":{"title":"A*的优化"}},"next":{"fields":{"slug":"/2006/2006-04-17-astar/"},"frontmatter":{"title":"终于明白了为什么新写的A*算法会快那么多"}}},"pageContext":{"id":"f6f35b03-9bcf-5e15-bd74-3803a92b01f2","previousPostId":"c83713ea-6673-58e6-bf30-197c35f41f3e","nextPostId":"e8b77d86-f25f-5a44-9bd9-9ab05371ec92"}},"staticQueryHashes":["2841359383","916993862"]}