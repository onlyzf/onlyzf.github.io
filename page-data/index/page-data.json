{"componentChunkName":"component---node-modules-gatsby-theme-blog-core-src-templates-posts-query-js","path":"/","result":{"data":{"site":{"siteMetadata":{"title":"Fan's life","social":[{"name":"github","url":"https://github.com/onlyzf"},{"name":"GitHub","url":"https://github.com/gatsbyjs"}]}},"allBlogPost":{"nodes":[{"__typename":"MdxBlogPost","id":"d93cdd75-0bda-5021-9338-cf3be4173a51","excerpt":"Sample Repository The Actual Module Location ./sample/ or ./sample.py Your module package is the core focus of the repository. It should not…","slug":"/snippets/py_struct/","title":"Structure of the Python Repository","date":"November 05, 2020","tags":[]},{"__typename":"MdxBlogPost","id":"cd775d15-2231-56ec-a10e-c24fdf7fc374","excerpt":"…","slug":"/2019/strategy/strategy/","title":"企业发展战略思考","date":"January 01, 2020","tags":["devops"]},{"__typename":"MdxBlogPost","id":"5f4a3183-b3b6-5d22-bc79-11cc58c90601","excerpt":"from  Defining Main Functions in Python Summary of Python Main Function Best Practices Here are four key best practices about main() in…","slug":"/snippets/py_main/","title":"Defining Main Functions in Python","date":"August 28, 2019","tags":[]},{"__typename":"MdxBlogPost","id":"e4ab53fa-aa67-5049-9646-93bd4ffe9107","excerpt":"B 当我们有单个任务要做的时候，情况还比较简单；当我们有很多任务要做时，计划可以很好地帮助我们清除地知道各种任务及它们需要的时间，严格按照计划执行，可充分利用你的时间。\n时间银行每天给你 8640…","slug":"/2019/time/","title":"城市创变者挑战赛——时光侦探","date":"August 18, 2019","tags":[]},{"__typename":"MdxBlogPost","id":"16ab244c-0d69-5cea-bf2e-7cc4d3bc0330","excerpt":"B…","slug":"/2019/bicycle/","title":"城市创变者挑战赛——单车的隐患","date":"August 17, 2019","tags":[]},{"__typename":"MdxBlogPost","id":"4b6a04b5-3deb-5058-a82f-4de99b6aeab4","excerpt":"W…","slug":"/2019/dream/","title":"城市创变者挑战赛——曾经的梦想","date":"August 16, 2019","tags":[]},{"__typename":"MdxBlogPost","id":"8af406d6-8deb-5543-bbff-d843ad09a7d9","excerpt":"F 如果我明天就要死去，我希望能不影响任何人悄悄的离开，不用有任何的葬礼，也不用专门通知大家。在我的朋友圈写一句“2019 年 8 月 17 日 Fan…","slug":"/2019/death/","title":"城市创变者挑战赛——向死而生","date":"August 16, 2019","tags":[]},{"__typename":"MdxBlogPost","id":"e490174d-b141-574c-83d4-24dcfd9bf830","excerpt":"B…","slug":"/2019/trash/","title":"城市创变者挑战赛——垃圾卫士","date":"August 15, 2019","tags":[]},{"__typename":"MdxBlogPost","id":"65727744-e9ab-5518-8ea6-aedbbf44f41b","excerpt":"B 这次我们做的任务叫“存在的意义”，要采访…","slug":"/2019/meaning_of_life/","title":"城市创变者挑战赛——存在的意义","date":"August 15, 2019","tags":[]},{"__typename":"MdxBlogPost","id":"63263caa-578c-5cab-85f6-766718c74d79","excerpt":"BB…","slug":"/2019/do_good/","title":"城市创变者挑战赛——日行一善","date":"August 14, 2019","tags":[]},{"__typename":"MdxBlogPost","id":"b53907c8-84d6-521a-81f4-74978779e7aa","excerpt":"B…","slug":"/2019/geeklife/","title":"城市创变者挑战赛——长辈的黑客生活","date":"August 13, 2019","tags":[]},{"__typename":"MdxBlogPost","id":"795b1883-f7bd-5a79-b87b-a8a564b071f9","excerpt":"WW…","slug":"/2019/blind_dumb/","title":"城市创变者挑战赛——盲人与哑巴","date":"August 13, 2019","tags":[]},{"__typename":"MdxBlogPost","id":"d4211ad0-afcd-57fd-9a4e-e94a50eca204","excerpt":"WW 迟到的感谢感想：我们的社会能如此和谐，少不了各行各业的社会服务者。我们团队边走边找目标，很快发现了警察、交通指挥员、快递员、公交司机、河道清洁工等目标人物。经过简单的交流，每个职业每天的工作时间都很长，短的八小时，长的竟然长达 1…","slug":"/2019/thanks/","title":"城市创变者挑战赛——迟到的感谢","date":"August 13, 2019","tags":[]},{"__typename":"MdxBlogPost","id":"c5e91a83-bddc-53fa-aeb9-81aaa9d3312b","excerpt":"WW 成都七十年感想：今年是建国 70 周年，我是一个把成都作为第二故乡的朋友，来到成都已经 21 周年，来到了这座“来了，就走不脱的城市”。虽然不及 70 年那么有沧桑感，但还是很深刻的感受到成都翻天覆地的变化。经常带孩子在峨影看电影，在接到这个任务后，想到通过对比峨影的 6…","slug":"/2019/cd70/","title":"城市创变者挑战赛——成都70年","date":"August 12, 2019","tags":[]},{"__typename":"MdxBlogPost","id":"618011d1-7d16-5a61-9b63-f558b456ad68","excerpt":"SRE 方法论 确保长期关注研发工作 Google 将 SRE 团队的运维工作限制在 50%以内。 SRE 处理运维工作的一项准则是：在每 8-12 小时的 on-call…","slug":"/2019/sre/","title":"《SRE Google运维解密》","date":"July 13, 2019","tags":[]},{"__typename":"MdxBlogPost","id":"d8638e80-a037-50fa-8132-25b09e58a0ac","excerpt":"docker enable debug in container","slug":"/snippets/container/","title":"容器及编排","date":"June 17, 2019","tags":[]},{"__typename":"MdxBlogPost","id":"e678d8b2-2b15-58e4-85bf-1d4bee6bd6a8","excerpt":"Docker 项目的目标是实现轻量级的操作系统虚拟化解决方案。 Docker 的基础是 Linux 容器（LXC）等技术。 在 LXC 的基础上 Docker 进行了进一步的封装，让用户不需要去关心容器的管理，使得操作更为简便。用户操作 Docker…","slug":"/2019/docker/","title":"《Docker —— 从入门到实践》","date":"May 05, 2019","tags":[]},{"__typename":"MdxBlogPost","id":"cb15a777-ce25-594d-bf65-4e3ead5d6406","excerpt":"…","slug":"/2018/2018-10-30-game-development/","title":"Game Development","date":"October 30, 2018","tags":[]},{"__typename":"MdxBlogPost","id":"973661fc-2375-5eb4-ae94-b3c13f0d950b","excerpt":"设计模式、游戏开发中的实践 系统架构设计师指引 云计算概念、分布式系统、高可用系统 https://www.coursera.org/learn/cloud-computing https://coolshell.cn/articles/10910.html https…","slug":"/2018/topic/","title":"可分享的主题","date":"October 20, 2018","tags":[]},{"__typename":"MdxBlogPost","id":"1102dfc1-306b-543d-b750-d047f2bf78e9","excerpt":"Flushing your DNS cache on Mac OS X Show listen ports Bluetooth Devices Not Connecting to OSX Solution: Delete com.apple.Bluetooth.plist…","slug":"/snippets/macOS/","title":"macOS","date":"October 20, 2018","tags":[]},{"__typename":"MdxBlogPost","id":"a5a83659-df32-51c9-9789-5e9370114062","excerpt":"How to Check Domain’s Nameservers How to check DNS record chinadns","slug":"/snippets/dns/","title":"DNS","date":"October 20, 2018","tags":["domain"]},{"__typename":"MdxBlogPost","id":"96bc945b-f223-55d8-910b-f121ffdc48ba","excerpt":"Supervisor is a client/server system that allows its users to monitor and control a number of processes on UNIX-like operating systems…","slug":"/snippets/supervisor/","title":"极简Supervisor","date":"October 19, 2018","tags":["devops"]},{"__typename":"MdxBlogPost","id":"5820ba79-cdc0-5327-8abe-bd50af4f1269","excerpt":"","slug":"/snippets/git/","title":"Git snippets","date":"October 13, 2018","tags":[]},{"__typename":"MdxBlogPost","id":"2744bb72-fe5f-54f8-bc35-3f643610e16c","excerpt":"~/.ssh/config","slug":"/snippets/ssh/","title":"SSH config","date":"October 13, 2018","tags":[]},{"__typename":"MdxBlogPost","id":"cabb46d7-d9ca-580e-ace4-6da6e6f18210","excerpt":"Create a new directory under version control","slug":"/snippets/svn/","title":"Subversion snippets","date":"October 13, 2018","tags":[]},{"__typename":"MdxBlogPost","id":"ed5eb2a0-704e-5282-897e-b22920bb3084","excerpt":"","slug":"/snippets/spring-config-server/","title":"Spring Config Server","date":"June 13, 2018","tags":[]},{"__typename":"MdxBlogPost","id":"2a684e42-52e4-5c58-b49f-3f4cd96069f5","excerpt":"Compiler Options We strongly recommend compiling with at least the following warning options: Recent versions of gcc also support an option…","slug":"/snippets/cc/","title":"GCC","date":"April 01, 2018","tags":["domain"]},{"__typename":"MdxBlogPost","id":"96ab2bd5-d703-51f9-9a0c-422b6a2e7738","excerpt":"Focus on one major idea. Give people a reason to care. Build your idea with familiar concepts. Make your idea worth sharing.","slug":"/2017/2017-05-09-how-to-speech/","title":"TED's secret to great public speaking","date":"May 09, 2017","tags":[]},{"__typename":"MdxBlogPost","id":"afd1fcfa-2c5c-5732-a2ba-e87c8983b8d1","excerpt":"长达 25 年的经验教训一：快速发布，短发布周期很重要 长达 25 年的经验教训二：流程的扩展性需要分布式层级状的开发模式，全靠 Linus 一个会死人，职责分工明确才能提高效率 长达 25 年的经验教训三：工具很重要，迁移到 BitKeeper…","slug":"/2016/2016-09-19-linux/","title":"Linux开发经验教训——来自《Linux 内核开发报告2016版》","date":"September 19, 2016","tags":[]},{"__typename":"MdxBlogPost","id":"c4b50730-37a2-577f-a20b-c119b85821dc","excerpt":"简介 功夫小子 是一款多人格斗竞技游戏，无成长，游戏中可切换武器，强调武器平衡及个人技术\n \n 开发：盛大成都研发 运营：盛大上海（后转入成都锦天） 上线时间：2007 年 运营状态：alive…","slug":"/2015/2015-03-04-kk/","title":"功夫小子运营","date":"March 04, 2015","tags":[]},{"__typename":"MdxBlogPost","id":"ce2094e0-defa-536f-9adc-4a545e4b4691","excerpt":"哲学 Story is king 最小的代价决定是否继续走下一步。 方法 idea script story board 2d 90 min movie 3d 90 min movie","slug":"/2014/2014-03-27-pixar/","title":"Pixar的哲学和方法","date":"March 27, 2014","tags":[]},{"__typename":"MdxBlogPost","id":"5a917a8e-3342-5c98-9459-ea65b463f11f","excerpt":"…","slug":"/2013/2013-11-30-pm/","title":"项目管理思考","date":"November 30, 2013","tags":[]},{"__typename":"MdxBlogPost","id":"12d7e265-c7dc-5e7f-897a-718356592752","excerpt":"我的电脑还没连网，也想过要和 Internet…","slug":"/2010/2010-09-16-internet/","title":"【转】从Internet说起——王小波","date":"September 16, 2010","tags":[]},{"__typename":"MdxBlogPost","id":"5402f9ef-914b-53b7-bd1c-389526a3f197","excerpt":"新设计的机器人框架的思路是这样的： 一共两个线程，UI 线程，逻辑线程； UI 线程为主线程，可能从 WinMain 开始执行； 逻辑线程为驻线程创建的独立线程，运行 Dispatcher 的 Update； UI 线程持有逻辑线程的句柄，当执行 UI…","slug":"/2007/2007-12-07-robot/","title":"关于机器人框架的设计","date":"December 07, 2007","tags":[]},{"__typename":"MdxBlogPost","id":"39f51676-e547-56ac-91bd-54302591ddb8","excerpt":"这是我拿 AQTime 做的一份性能测试，主要用于比较 vector 和 list 的性能，时间的单位是时钟周期。\n测试环境：CPU Core Duo T2300 双核，编译器 vc 8.0(vs2005)。 两种数据结构的性能差异主要集中在 insert 和 erase…","slug":"/2007/2007-08-22-vector-vs-list/","title":"vector和list的性能比较","date":"August 22, 2007","tags":[]},{"__typename":"MdxBlogPost","id":"6f3b3464-4fc8-5480-8281-405f6c84cdfe","excerpt":"这几天终于可以趁着机器人需求比较丰富的时候重构一下整个机器人了。大的东西没有变，但是基于 timer 性能的缘故，把 stopwatch 从 timer 里面移出来，否则每个周期的大部分时间都被 stopwatch 占去了，很划不来。另外，对于比较新的需求增加了几个行为，i…","slug":"/2007/2007-08-22-journal/","title":"近日工作","date":"August 22, 2007","tags":[]},{"__typename":"MdxBlogPost","id":"77975f8a-6b01-5f69-9f27-63a66512830d","excerpt":"既然已经有现成的很成熟的  ACE  库了，就不要搞什么完成端口模型需要耗费大量时间的网络编程了。在 ACE 的基础上写服务器应该不错。 考虑到扩展性，打算分成两层，一层基本服务，直接使用 ACE…","slug":"/2006/2006-05-26-ace/","title":"计划用ACE写一个服务器","date":"May 26, 2006","tags":[]},{"__typename":"MdxBlogPost","id":"a1312898-88fb-5133-99fc-a713ff637459","excerpt":"经过了几天的测试，排除了几个小 Bug，现在的算法已经是很稳定了。性能大概是以前的三倍左右，最终的结果是只用上了设置状态的优化方法，其他方法都没用到。 之前会快 20 倍是因为新算法忘了做 clear，加上以后就是现在这个样子，大概是以前…","slug":"/2006/2006-04-17-astar/","title":"终于明白了为什么新写的A*算法会快那么多","date":"April 17, 2006","tags":[]},{"__typename":"MdxBlogPost","id":"eb5d079e-836b-5278-80c1-73f30602c043","excerpt":"根据《人工智能游戏编程真言》的提示，分别尝试了几种优化方式，比如： 在节点上加标志 开放表和关闭表改用 Hash 表（不过如果采用在节点加标志的方法，好像 Hash 表就没有意义了，直接访问该节点标志判断处于哪种状态还快些。而且 Hash…","slug":"/2006/2006-04-11-astar/","title":"A*的优化","date":"April 11, 2006","tags":[]},{"__typename":"MdxBlogPost","id":"91d6f00b-dedc-587f-9976-35c6b0f26996","excerpt":"前几天用 C++模板重写了一遍 A * 算法，实现的内容和非模板的算法一模一样，做了一下性能测试居然比非模板算法快 20 倍。太不可思议了，不能理解，看来看去两个算法都是一样的呀，难道真的是模板造成的？？据说模板的效率主要和编译器有关系，我用的编译器是 VC…","slug":"/2006/2006-04-11-cpp-template/","title":"模板有那么快么？？","date":"April 11, 2006","tags":[]},{"__typename":"MdxBlogPost","id":"5303f1a1-eb93-52f3-a12c-69f170d64a8b","excerpt":"…","slug":"/2006/2006-04-06-buckets-effect/","title":"【转】谈论木桶理论新论","date":"April 06, 2006","tags":[]},{"__typename":"MdxBlogPost","id":"3bd4885e-04a1-5934-92ec-a920e5d8b208","excerpt":"《设计模式》上关于单件的定义和实现如下： 由于 Instance…","slug":"/2006/2006-04-06-singleton/","title":"关于单件模式（Singleton）","date":"April 06, 2006","tags":[]},{"__typename":"MdxBlogPost","id":"8e1224d2-7bb6-51ac-8734-de9890e6676b","excerpt":"在学习敏捷的时候听到结对编程这个概念，昨天和 water 实践了一下，确实有比较好的效果，就好像手把手的交你，而且一个人编程，另一个人可以查错，还可以思考很多问题，很好的方式。但是不知道效率如何。起码 water 的速度是很快的，我有点儿跟不上他。","slug":"/2005/2005-05-09-try-pairs/","title":"体验结对","date":"May 09, 2005","tags":[]},{"__typename":"MdxBlogPost","id":"f00daa7c-68eb-5017-86b9-7510abc26074","excerpt":"有一个笔记本放在面前，随时记录想法。 中午最好能趴 10 分钟，效果很好。但是不能在床上睡。","slug":"/2005/2005-04-26-working-ideas/","title":"工作心得","date":"April 26, 2005","tags":[]}]}},"pageContext":{}},"staticQueryHashes":["2744905544","3090755652","386998304","764694655"]}