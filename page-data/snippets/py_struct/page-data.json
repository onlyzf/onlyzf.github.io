{"componentChunkName":"component---node-modules-gatsby-theme-blog-core-src-templates-post-query-js","path":"/snippets/py_struct/","result":{"data":{"site":{"siteMetadata":{"title":"Fan's life","social":[{"name":"github","url":"https://github.com/onlyzf"},{"name":"GitHub","url":"https://github.com/gatsbyjs"}]}},"blogPost":{"__typename":"MdxBlogPost","id":"d93cdd75-0bda-5021-9338-cf3be4173a51","excerpt":"Sample Repository The Actual Module Location ./sample/ or ./sample.py Your module package is the core focus of the repository. It should not…","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Structure of the Python Repository\",\n  \"date\": \"2020-11-05T06:30:59Z\",\n  \"tags\": null\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"sample-repository\"\n  }, \"Sample Repository\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"README.rst\\nLICENSE\\nsetup.py\\nrequirements.txt\\nsample/__init__.py\\nsample/core.py\\nsample/helpers.py\\ndocs/conf.py\\ndocs/index.rst\\ntests/test_basic.py\\ntests/test_advanced.py\\n\")), mdx(\"h2\", {\n    \"id\": \"the-actual-module\"\n  }, \"The Actual Module\"), mdx(\"h3\", {\n    \"id\": \"location-sample-or-samplepy\"\n  }, \"Location ./sample/ or ./sample.py\"), mdx(\"p\", null, \"Your module package is the core focus of the repository. It should not be tucked away:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"./sample/\\n\")), mdx(\"p\", null, \"If your module consists of only a single file, you can place it directly in the root of your repository:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"./sample.py\\n\")), mdx(\"p\", null, \"Your library does not belong in an ambiguous src or python subdirectory.\"), mdx(\"h2\", {\n    \"id\": \"test-suite\"\n  }, \"Test Suite\"), mdx(\"h3\", {\n    \"id\": \"location-test_samplepy-or-tests\"\n  }, \"Location ./test_sample.py or ./tests\"), mdx(\"p\", null, \"Starting out, a small test suite will often exist in a single file:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"./test_sample.py\\n\")), mdx(\"p\", null, \"Once a test suite grows, you can move your tests to a directory, like so:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"tests/test_basic.py\\ntests/test_advanced.py\\n\")), mdx(\"p\", null, \"Obviously, these test modules must import your packaged module to test it. You can do this a few ways:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Expect the package to be installed in site-packages.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use a simple (but explicit) path modification to resolve the package properly.\")), mdx(\"p\", null, \"I highly recommend the latter. Requiring a developer to run setup.py develop to test an actively changing codebase also requires them to have an isolated environment setup for each instance of the codebase.\"), mdx(\"p\", null, \"To give the individual tests import context, create a tests/context.py file:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-py\"\n  }), \"import os\\nimport sys\\nsys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(**file**), '..')))\\n\\nimport sample\\n\")), mdx(\"p\", null, \"Then, within the individual test modules, import the module like so:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-py\"\n  }), \"from .context import sample\\n\")), mdx(\"p\", null, \"This will always work as expected, regardless of installation method.\"), mdx(\"p\", null, \"Some people will assert that you should distribute your tests within your module itself \\u2013 I disagree. It often increases complexity for your users; many test suites often require additional dependencies and runtime contexts.\"), mdx(\"h2\", {\n    \"id\": \"setuppy-example\"\n  }, \"setup.py example\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"# Download the setup.py file:\\n#  download with wget\\nwget https://raw.githubusercontent.com/navdeep-G/setup.py/master/setup.py -O setup.py\\n\\n#  download with curl\\ncurl -O https://raw.githubusercontent.com/navdeep-G/setup.py/master/setup.py\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","slug":"/snippets/py_struct/","title":"Structure of the Python Repository","tags":[],"date":"November 05, 2020","image":null,"imageAlt":null,"socialImage":null},"previous":{"__typename":"MdxBlogPost","id":"cd775d15-2231-56ec-a10e-c24fdf7fc374","excerpt":"…","slug":"/2019/strategy/strategy/","title":"企业发展战略思考","date":"January 01, 2020"},"next":null},"pageContext":{"id":"d93cdd75-0bda-5021-9338-cf3be4173a51","previousId":"cd775d15-2231-56ec-a10e-c24fdf7fc374","maxWidth":1380}},"staticQueryHashes":["2744905544","3090755652","386998304","764694655"]}