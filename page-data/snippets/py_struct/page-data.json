{"componentChunkName":"component---src-templates-blog-post-js","path":"/snippets/py_struct/","result":{"data":{"site":{"siteMetadata":{"title":"Fan's life"}},"markdownRemark":{"id":"57ea952d-72ea-5700-bedb-9242aa6ccb69","excerpt":"Sample Repository The Actual Module Location ./sample/ or ./sample.py Your module package is the core focus of the repository. It should not be tucked away: If…","html":"<h2>Sample Repository</h2>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">README.rst\nLICENSE\nsetup.py\nrequirements.txt\nsample/__init__.py\nsample/core.py\nsample/helpers.py\ndocs/conf.py\ndocs/index.rst\ntests/test_basic.py\ntests/test_advanced.py</code></pre></div>\n<h2>The Actual Module</h2>\n<h3>Location ./sample/ or ./sample.py</h3>\n<p>Your module package is the core focus of the repository. It should not be tucked away:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">./sample/</code></pre></div>\n<p>If your module consists of only a single file, you can place it directly in the root of your repository:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">./sample.py</code></pre></div>\n<p>Your library does not belong in an ambiguous src or python subdirectory.</p>\n<h2>Test Suite</h2>\n<h3>Location ./test_sample.py or ./tests</h3>\n<p>Starting out, a small test suite will often exist in a single file:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">./test_sample.py</code></pre></div>\n<p>Once a test suite grows, you can move your tests to a directory, like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">tests/test_basic.py\ntests/test_advanced.py</code></pre></div>\n<p>Obviously, these test modules must import your packaged module to test it. You can do this a few ways:</p>\n<ul>\n<li>Expect the package to be installed in site-packages.</li>\n<li>Use a simple (but explicit) path modification to resolve the package properly.</li>\n</ul>\n<p>I highly recommend the latter. Requiring a developer to run setup.py develop to test an actively changing codebase also requires them to have an isolated environment setup for each instance of the codebase.</p>\n<p>To give the individual tests import context, create a tests/context.py file:</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">import</span> sys\nsys<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>insert<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>abspath<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>dirname<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span><span class=\"token builtin\">file</span><span class=\"token operator\">**</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'..'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">import</span> sample</code></pre></div>\n<p>Then, within the individual test modules, import the module like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>context <span class=\"token keyword\">import</span> sample</code></pre></div>\n<p>This will always work as expected, regardless of installation method.</p>\n<p>Some people will assert that you should distribute your tests within your module itself – I disagree. It often increases complexity for your users; many test suites often require additional dependencies and runtime contexts.</p>\n<h2>setup.py example</h2>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\"># Download the setup.py file:</span>\n<span class=\"token comment\">#  download with wget</span>\n<span class=\"token function\">wget</span> https://raw.githubusercontent.com/navdeep-G/setup.py/master/setup.py -O setup.py\n\n<span class=\"token comment\">#  download with curl</span>\n<span class=\"token function\">curl</span> -O https://raw.githubusercontent.com/navdeep-G/setup.py/master/setup.py</code></pre></div>","frontmatter":{"title":"Structure of the Python Repository","date":"November 05, 2020","description":null}},"previous":{"fields":{"slug":"/2019/strategy/strategy/"},"frontmatter":{"title":"企业发展战略思考"}},"next":null},"pageContext":{"id":"57ea952d-72ea-5700-bedb-9242aa6ccb69","previousPostId":"fac57c0e-5897-5532-95d2-ba69e5a932a7","nextPostId":null}},"staticQueryHashes":["2841359383","916993862"]}