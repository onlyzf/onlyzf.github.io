{"componentChunkName":"component---node-modules-gatsby-theme-blog-core-src-templates-post-query-js","path":"/snippets/container/","result":{"data":{"site":{"siteMetadata":{"title":"Fan's life","social":[{"name":"github","url":"https://github.com/onlyzf"},{"name":"GitHub","url":"https://github.com/gatsbyjs"}]}},"blogPost":{"__typename":"MdxBlogPost","id":"d8638e80-a037-50fa-8132-25b09e58a0ac","excerpt":"docker enable debug in container","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"容器及编排\",\n  \"date\": \"2019-06-17 19:07:00Z\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"docker\"\n  }, \"docker\"), mdx(\"h3\", {\n    \"id\": \"enable-debug-in-container\"\n  }, \"enable debug in container\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"docker run --cap-add=SYS_PTRACE --security-opt seccomp=unconfined\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","slug":"/snippets/container/","title":"容器及编排","tags":[],"date":"June 17, 2019","image":null,"imageAlt":null,"socialImage":null},"previous":{"__typename":"MdxBlogPost","id":"e678d8b2-2b15-58e4-85bf-1d4bee6bd6a8","excerpt":"Docker 项目的目标是实现轻量级的操作系统虚拟化解决方案。 Docker 的基础是 Linux 容器（LXC）等技术。 在 LXC 的基础上 Docker 进行了进一步的封装，让用户不需要去关心容器的管理，使得操作更为简便。用户操作 Docker…","slug":"/2019/docker/","title":"《Docker —— 从入门到实践》","date":"May 05, 2019"},"next":{"__typename":"MdxBlogPost","id":"618011d1-7d16-5a61-9b63-f558b456ad68","excerpt":"SRE 方法论 确保长期关注研发工作 Google 将 SRE 团队的运维工作限制在 50%以内。 SRE 处理运维工作的一项准则是：在每 8-12 小时的 on-call…","slug":"/2019/sre/","title":"《SRE Google运维解密》","date":"July 13, 2019"}},"pageContext":{"id":"d8638e80-a037-50fa-8132-25b09e58a0ac","previousId":"e678d8b2-2b15-58e4-85bf-1d4bee6bd6a8","nextId":"618011d1-7d16-5a61-9b63-f558b456ad68","maxWidth":1380}},"staticQueryHashes":["2744905544","3090755652","386998304","764694655"]}